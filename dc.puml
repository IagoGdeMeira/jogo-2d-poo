@startuml

abstract GraphicElement <<abstract>> {
  - int x
  - int y
  
  - int movementX
  - int movementY
  - int movementSpeed
  
  - Image element
  - int widthElement
  - int heightElement
  
  - boolean isVisible
  ----
  + {abstract} void load(String directory)
  + {abstract} void update()
  + Rectangle getColision()
  ..getters and setters..
}

class Blast {
  + Blast(int x, int y, String elementDirectory)
}

class Enemy {
  - int points
  --
  + Enemy(int x, int y, String elementDirectory)
  ..getters and setters..
}

class Asteroid {
  + Asteroid(int x, int y, String elementDirectory)
}

class Player {
  - int lives
  - int points
  --
  + Player(String elementDirectory)
  + void shoot()
  + void move(KeyEvent key)
  + void stop(KeyEvent key)
  ..getters and setters..
}

abstract Commands <<abstract>> {
  - {static} int goUp1
  - {static} int goUp2
  - {static} int goDown1
  - {static} int goDown2
  - {static} int goLeft1
  - {static} int goLeft2
  - {static} int goRight1
  - {static} int goRight2
  
  - {static} int doBlast
  - {static} int doSuperBlast
  ----
  ..getters and setters..
}

abstract Stage <<abstract>> {
  # Image background
  # Timer timer
  # boolean inGame
  # boolean gameOver
  --
  + Stage()
  + {abstract} void startBackgroundGEs()
  + {abstract} void startEnemies()
  + {abstract} void verifyColisions()
  + {abstract} void paint(Graphics g)
  + {abstract} void keyTyped(KeyEvent e)
  + {abstract} void keyPressed(KeyEvent e)
  + {abstract} void keyReleased(KeyEvent e)
  + {abstract} void actionPerformed(ActionEvent e)
}

GraphicElement <|-- Asteroid :extends
